#ifdef RR
subroutine makecorrelation_rr(z)
#else
subroutine makecorrelation_rg(z)
#endif
  use mpi
  use mpitools
  use common_vars
  use conversiontools
  use absorptiontools
  use omp_lib
  use io_tools
  use vectortools
  implicit none

  ! should have used halfbox instead
  real(kind=8) :: BinSize
  integer(kind=4),parameter :: max_haloperlinehisto = 200


  integer(kind=8) :: i,j,k,n_point,totalbin,totalpoint,omp_thread
  integer(kind=4) :: fh_hitpoint,fh_direction,fh_haloid
  integer(kind=4) :: fh_lineid,fh_online, line_with_max_halo, max_halo_so_far
  integer(kind=8) :: curHalo,innerHalo,block
  integer(kind=mpi_offset_kind) :: filesize
  integer(kind=4),allocatable :: lineid(:),linelinkedlist(:),haloid(:)
  real(kind=4), allocatable :: online(:),direction(:,:)
  integer(kind=8) :: haloperline(max_line),headofline(max_line),haloperline_small(max_line)
  integer(kind=8) :: haloperline_large(max_line)
  integer(kind=8),allocatable :: histogram_dist(:), histogram_undist(:), &
       subhisto_dist(:,:),subhisto_undist(:,:), &
       subhisto_galactic_dist(:,:), subhisto_mini_dist(:,:), &
       subhisto_galactic_undist(:,:), subhisto_mini_undist(:,:), &
       finalhisto_dist(:),finalhisto_undist(:), &
       haloperlinehisto(:),subhaloperlinehisto(:,:), &
       finalhalolinehisto(:)
  real(kind=8),allocatable :: correlation_dist(:),correlation_undist(:)
  real(kind=4) :: r
  real(kind=8) :: Halfbox,mass_limit
  character(len=100) :: str_rank,z_s
  real(kind=8) :: z,d0,d_self
  integer(kind=4) :: halonumber,n_elements,rlogsteps
  real(kind=4), allocatable :: halodata(:,:)
  real(kind=8), allocatable :: distorted_dist(:),undistorted_dist(:)
  logical :: element_flag(1:17)
  real(kind=8) :: undistorted_z,distorted_z
  integer(kind=8) :: usedlines, totusedlines
  real(kind=8) :: rmax,rmin,rminlog,rmaxlog,deltalogr

  Binsize = Boxsize/1000
  
  Halfbox = real(BoxSize,8)/2.d0
  rmin = convert_length2physical(1.d0,z)
  rmax = convert_length2physical(Halfbox,z)
  rminlog = log10(rmin)
  rmaxlog = log10(rmax)
  rlogsteps = 10
  deltalogr  =  (rmaxlog-rminlog)/rlogsteps
  
  write(z_s,'(f10.3)') z
  z_s = adjustl(z_s)
  write(str_rank,'(i10)') rank
  str_rank = adjustl(str_rank)
  omp_thread = omp_get_max_threads()

  mass_limit = 1.d8

  if(rank ==0) then
     print*,'OMP threads = ',omp_thread
     print*,'MPI threads = ',nodes_returned
  endif


  element_flag(1:17) = .FALSE.
  element_flag(7:9) = .TRUE. ! 1:3 => velocity
  element_flag(15) = .TRUE.

  halonumber = get_halo_number(real(z,4))
  n_elements = get_n_elements(element_flag)

  allocate(halodata(1:n_elements,1:halonumber))
  call mpi_read_halo(real(z,4),element_flag,n_elements,halonumber, halodata)
  call MPI_BARRIER(MPI_COMM_WORLD,ierr)
  !call abort
  if(rank ==0) print*,"Broadcasting from node 0"
  call mpi_bcast(halodata,halonumber*n_elements,mpi_real,0,mpi_comm_world,ierr)
  if(rank ==0) print*,"Finish broadcasting from node 0"
  call MPI_BARRIER(MPI_COMM_WORLD,ierr)
 
  if(rank ==0) print*,"Start reading LOS data"
#ifdef RR
  call mpi_file_open(mpi_comm_self, &
       trim(los_path)//'/'//z_s(1:len_trim(z_s))//'/RR/LINEID/'//trim(adjustl(str_rank)), &
       MPI_MODE_RDONLY, &
       mpi_info_null,fh_lineid,ierr)
#else
  call mpi_file_open(mpi_comm_self, &
       trim(los_path)//'/'//z_s(1:len_trim(z_s))//'/RG/LINEID/'//trim(adjustl(str_rank)), &
       MPI_MODE_RDONLY, &
       mpi_info_null,fh_lineid,ierr)
#endif
  if(rank ==0) print*,'Get N-point ....'

  call mpi_file_get_size (fh_lineid, filesize, ierr)
  n_point = filesize/4

  if(rank ==0) print*, 'total point',n_point
  if(rank ==0) print*,'Allocate lineid,online,linkedlist ....'

  allocate(lineid(1:n_point))
  allocate(online(1:n_point))
  allocate(haloid(1:n_point))
  allocate(direction(1:3,1:n_point))
  allocate(distorted_dist(1:n_point))
  allocate(undistorted_dist(1:n_point))
  allocate(linelinkedlist(1:n_point))

  if(rank ==0) print*,'Read data into lineid ....'
  call mpi_file_read(fh_lineid,lineid,n_point,mpi_integer,mpi_status_ignore,ierr)

  if(rank ==0) print*,'Close file lineid ....'

  call mpi_file_close(fh_lineid,ierr)

  if(rank ==0) print*,'Open file for online ....'

#ifdef RR
  call mpi_file_open(mpi_comm_self, &
        trim(los_path)//'/'//z_s(1:len_trim(z_s))//'/RR/ONLINE/'//trim(adjustl(str_rank)), &
       MPI_MODE_RDONLY, &
       mpi_info_null,fh_online,ierr)
#else
  call mpi_file_open(mpi_comm_self, &
        trim(los_path)//'/'//z_s(1:len_trim(z_s))//'/RG/ONLINE/'//trim(adjustl(str_rank)), &
       MPI_MODE_RDONLY, &
       mpi_info_null,fh_online,ierr)
#endif
  if(rank ==0) print*,'Read data into online ....'

  call mpi_file_read(fh_online,online,n_point,mpi_real,mpi_status_ignore,ierr)
  if(rank ==0) then
     print*,'Close file online ....'
  endif
  call mpi_file_close(fh_online,ierr)


  if(rank ==0) print*,'Open file for direction ....'

#ifdef RR
  call mpi_file_open(mpi_comm_self, &
       trim(los_path)//'/'//z_s(1:len_trim(z_s))//'/RR/DIRECTION/'//trim(adjustl(str_rank)), &
       MPI_MODE_RDONLY, &
       mpi_info_null,fh_direction,ierr)
#else
  call mpi_file_open(mpi_comm_self, &
        trim(los_path)//'/'//z_s(1:len_trim(z_s))//'/RG/DIRECTION/'//trim(adjustl(str_rank)), &
       MPI_MODE_RDONLY, &
       mpi_info_null,fh_direction,ierr)
#endif
  if(rank ==0) print*,'Read data into direciton ....'

  call mpi_file_read(fh_direction,direction,3*n_point,mpi_real,mpi_status_ignore,ierr)
  if(rank ==0) then
     print*,'Close file online ....'
  endif
  call mpi_file_close(fh_direction,ierr)


#ifdef RR
  call mpi_file_open(mpi_comm_self, &
       trim(los_path)//trim(z_s)//'/RR/HALOID/'//trim(adjustl(str_rank)), &
       MPI_MODE_RDONLY, &
       mpi_info_null,fh_haloid,ierr)
#else
  call mpi_file_open(mpi_comm_self, &
       trim(los_path)//trim(z_s)//'/RG/HALOID/'//trim(adjustl(str_rank)), &
       MPI_MODE_RDONLY, &
       mpi_info_null,fh_haloid,ierr)
#endif
  if(rank ==0) print*,'Read data into haloid ....'

  call mpi_file_read(fh_haloid,haloid,n_point,mpi_integer,mpi_status_ignore,ierr)
  if(rank ==0) then
     print*,'Close file online ....'
  endif
  call mpi_file_close(fh_haloid,ierr)


  ! make linked list
  if(rank ==0) then
     print*,'Making linkedlist ....'
     print*,'... Allocating.....'
  endif
  haloperline(1:max_line) = 0
  linelinkedlist(1:n_point) = 0
  headofline(1:max_line) = 0


  if(rank ==0) print*,'... Looping for linkedlist....'
  call MPI_BARRIER(MPI_COMM_WORLD,ierr)

  d0 = z_to_d(z)
  do i=1,n_point
     curHalo = haloid(i)
     undistorted_dist(i) = d0+convert_length2physical(real((BoxSize/2.-online(i)),8),z)
     undistorted_z = d_to_z(undistorted_dist(i))
     distorted_z = undistorted_z+convert_vel2physical(real(dotproduct(-1.*direction(1:3,i),halodata(1:3,curHalo)),8),z)/c
     distorted_dist(i) = z_to_d(distorted_z)

#ifdef DEBUG
     if(rank==0 .and. (lineid(i) > max_line .or. lineid(i) < 1)) &
          print*,i,lineid(i)
#endif

     haloperline(lineid(i)) = haloperline(lineid(i))+1
     if(convert_mass2physical(real(halodata(4,curHalo),8))/M_sol > mass_limit) then
        haloperline_large(lineid(i)) =  haloperline_large(lineid(i)) +1
     else
        haloperline_small(lineid(i)) =  haloperline_small(lineid(i)) + 1
     end if
     linelinkedlist(i) = headofline(lineid(i))
     headofline(lineid(i)) = i
  end do

  deallocate(halodata,haloid,direction)

  if(rank==0)  then
     line_with_max_halo = 0
     max_halo_so_far = 0
     do i = 1, max_line
        if(haloperline(i) > max_halo_so_far) then
           max_halo_so_far = haloperline(i)
           line_with_max_halo = i
        end if
     end do
     line_use_to_save = line_with_max_halo
  end if
  if(rank ==0) print*,'Calculating total bins ....'

  totalbin = int(convert_length2physical(HalfBox,z)/convert_length2physical(BinSize,z))
  !totalbin = rlogsteps
  if(rank ==0) print*,'Total bin :',totalbin
  if(rank ==0) print*,'Allocating histogram ....'


  allocate(histogram_undist(1:totalbin))
  allocate(histogram_dist(1:totalbin))
  allocate(haloperlinehisto(0:max_haloperlinehisto))
  allocate(subhisto_dist(1:totalbin,0:omp_thread-1))
  allocate(subhisto_undist(1:totalbin,0:omp_thread-1))
  allocate(subhisto_mini_dist(1:totalbin,0:omp_thread-1))
  allocate(subhisto_galactic_dist(1:totalbin,0:omp_thread-1))
  allocate(subhisto_mini_undist(1:totalbin,0:omp_thread-1))
  allocate(subhisto_galactic_undist(1:totalbin,0:omp_thread-1))
  allocate(subhaloperlinehisto(0:max_haloperlinehisto,0:omp_thread-1))

  if(rank ==0) print*,'Set all histograms to 0 ....'


  subhisto_dist(1:totalbin,0:omp_thread-1) = 0
  subhisto_undist(1:totalbin,0:omp_thread-1) = 0
  subhisto_mini_dist(1:totalbin,0:omp_thread-1) = 0
  subhisto_mini_undist(1:totalbin,0:omp_thread-1) = 0
  subhisto_galactic_dist(1:totalbin,0:omp_thread-1) = 0
  subhisto_galactic_undist(1:totalbin,0:omp_thread-1) = 0
  histogram_dist(1:totalbin) = 0
  histogram_undist(1:totalbin) = 0
  haloperlinehisto(0:max_haloperlinehisto) = 0
  subhaloperlinehisto(0:max_haloperlinehisto,0:omp_thread-1) = 0

  if(rank ==0) print*,'Making Halonumber/line histogram ....'
  !if(rank == 0) then
  !do i=1,max_line 
  !        if(haloperline(i) == 0) print*,i
  !end do
  !endif

  !$omp parallel
  !$omp do
  do i=1,max_line
     if(haloperline(i) == 0) print*, rank,i,"has 0 halos"
     if(haloperline(i) >= 0 .and. haloperline(i) <= &
          max_haloperlinehisto) then
        subhaloperlinehisto(haloperline(i),omp_get_thread_num()) = &
             subhaloperlinehisto(haloperline(i),omp_get_thread_num())+1
     endif
  end do
  !$omp end do
  !$omp end parallel




  if(rank ==0) print*,'Combining Halonumber/line histogram from OMP ....'


  do i=0,omp_thread-1
     haloperlinehisto(0:max_haloperlinehisto) = &
          subhaloperlinehisto(0:max_haloperlinehisto,i) + &
          haloperlinehisto(0:max_haloperlinehisto)
  end do

  !print*, "rank = ",rank, haloperlinehisto(0)

  if(rank ==0) print*,'Making N(r) histogram ....'

  usedlines = 0
  !$omp parallel private(curHalo,innerHalo,r,block) 
  !$omp do
  do i=1, max_line
     if(haloperline(i) >= 0) then
        curHalo = headofline(i)
        !print*, curHalo
#ifdef DEBUG
        if(curHalo < 0 .or. curHalo > n_point) then
           print*, &
                'rank=',rank,'mp=',omp_get_thread_num(), &
                'curHalo=',curhalo
           call abort
        endif
#endif
        do while(curHalo /= 0)
           !innerHalo = linelinkedlist(curHalo)
           innerHalo = headofline(i)
           do while (innerHalo /= 0)
              if(innerHalo /= curHalo) then
                 r = real(abs(distorted_dist(curHalo) - distorted_dist(innerHalo)),4)
                 block = ceiling((r)/convert_length2physical(BinSize,z))
                 !block = ceiling((log10(r)-rminlog)/deltalogr)
                 if(block <= totalbin .and. block >= 1) then
                    subhisto_dist(block,omp_get_thread_num()) = &
                         subhisto_dist(block,omp_get_thread_num())+1
                 end if
                 r = real(abs(undistorted_dist(curHalo) - undistorted_dist(innerHalo)),4)
                 block = ceiling((r)/convert_length2physical(BinSize,z))
                 !block = ceiling((log10(r)-rminlog)/deltalogr)
                 if(block <= totalbin .and. block >= 1) then
                    subhisto_undist(block,omp_get_thread_num()) = &
                         subhisto_undist(block,omp_get_thread_num())+1
                 end if
              endif
              innerHalo = linelinkedlist(innerHalo)
           end do
           curHalo = linelinkedlist(curHalo)
        end do
     end if
  end do
  !$omp end do
  !$omp end parallel

  if(rank ==0) then
     print*,'Combining N(r) histogram from OMP ....'
  endif
  do i = 0,omp_thread-1
     histogram_dist(1:totalbin) = histogram_dist(1:totalbin) + &
          subhisto_dist(1:totalbin,i) 
     histogram_undist(1:totalbin) = histogram_undist(1:totalbin) + &
          subhisto_undist(1:totalbin,i) 
  end do


  deallocate(subhisto_undist,subhisto_dist)
  if(rank == 0) then

     print*,'Allocate arrays in Rank 0 for combining data from MPI ....'        
     allocate(finalhisto_dist(1:totalbin))
     allocate(finalhisto_undist(1:totalbin))
     allocate(correlation_dist(1:totalbin))
     allocate(correlation_undist(1:totalbin))
     allocate(finalhalolinehisto(0:max_haloperlinehisto))
     finalhisto_dist(1:totalbin) = 0
     finalhisto_undist(1:totalbin) = 0
  endif

  if(rank ==0) then
     print*,'Waiting for MPI ....'
  endif
  call MPI_BARRIER(MPI_COMM_WORLD,ierr)

  if(rank ==0) print*,'Combining histogram from MPI ....'

  call mpi_reduce(histogram_dist, &
       finalhisto_dist,totalbin, &
       mpi_integer8,mpi_sum,0,mpi_comm_world,ierr)
  call mpi_reduce(histogram_undist, &
       finalhisto_undist,totalbin, &
       mpi_integer8,mpi_sum,0,mpi_comm_world,ierr)

  if(rank ==0) print*,'Waiting for MPI ....'

  call MPI_BARRIER(MPI_COMM_WORLD,ierr)

  !if(rank ==0) print*,'Combining Total point from MPI ....'

  !call mpi_reduce(n_point, totalpoint,1, &
  !        mpi_integer8,mpi_sum,0,mpi_comm_world,ierr)

  if(rank ==0) print*,'Waiting for MPI ....'
  if(rank ==0) print*,'total points:',totalpoint

  call MPI_BARRIER(MPI_COMM_WORLD,ierr)

  if(rank ==0) print*,'Combining halo per line from MPI ....'

  call mpi_reduce(haloperlinehisto, &
       finalhalolinehisto,max_haloperlinehisto+1, &
       mpi_integer8,mpi_sum,0,mpi_comm_world,ierr)        

  if(rank ==0) print*,'Waiting for MPI ....'

  call MPI_BARRIER(MPI_COMM_WORLD,ierr)

  if(rank ==0) then
     !print*, 'Combining N .....'
     !do i=0,nodes_returned-1
     !        finalhisto(1:totalbin) = finalhisto(1:totalbin) + &
     !                                  totalhisto(i*totalbin+1:i*totalbin+totalbin)
     !end do

     print*, 'Calculating correlation ....'

     totalpoint = 0
     do i=1, totalbin
        totalpoint = totalpoint+finalhisto_dist(i)
     end do

     !correlation_dist(1) = &
          !real(finalhisto_dist(i))/convert_length2physical(BinSize,z)/(real(totalpoint)/convert_length2physical(HalfBox,z)) - 1.
          !real(finalhisto_dist(1))/(10.**(real(1)*deltalogr))/(real(totalpoint)/convert_length2physical(HalfBox,z)) - 1.
     !correlation_undist(1) = &
          !real(finalhisto_undist(i))/convert_length2physical(BinSize,z)/(real(totalpoint)/convert_length2physical(HalfBox,z)) - 1.
          !real(finalhisto_undist(1))/(10.**(real(1)*deltalogr))/(real(totalpoint)/convert_length2physical(HalfBox,z)) - 1.
     do i=1,totalbin
        correlation_dist(i) = &
             real(finalhisto_dist(i))/convert_length2physical(BinSize,z)/(real(n_point)/convert_length2physical(HalfBox*2.,z)) - 1.
             !real(finalhisto_dist(i))/(10.**(real(i)*deltalogr)-10.**(real(i-1)*deltalogr))/(real(totalpoint)/convert_length2physical(HalfBox,z)) - 1.
        correlation_undist(i) = &
             real(finalhisto_undist(i))/convert_length2physical(BinSize,z)/(real(n_point)/convert_length2physical(HalfBox*2.,z)) - 1.
             !real(finalhisto_undist(i))/(10.**(real(i)*deltalogr)-10.**(real(i-1)*deltalogr))/(real(totalpoint)/convert_length2physical(HalfBox,z)) - 1.
     enddo
#ifdef RR
     call system("mkdir -p "//trim(result_path)//z_s(1:len_trim(z_s))//'/RR')
     print*, 'Printing to file ',trim(result_path)//'/'//z_s(1:len_trim(z_s))//'/RR/correlation.dat'
     call system("rm -rf "//trim(result_path)//z_s(1:len_trim(z_s))//'/RR/correlation.dat')
     open(11,file=trim(result_path)//'/'//z_s(1:len_trim(z_s))//'/RR/correlation.dat',STATUS = 'NEW')
#else
     call system("mkdir -p "//trim(result_path)//z_s(1:len_trim(z_s))//'/RG')
     print*, 'Printing to file ',trim(result_path)//'/'//z_s(1:len_trim(z_s))//'/RG/correlation.dat'
     call system("rm -rf "//trim(result_path)//z_s(1:len_trim(z_s))//'/RG/correlation.dat')
     open(11,file=trim(result_path)//'/'//z_s(1:len_trim(z_s))//'/RG/correlation.dat',STATUS = 'NEW')
#endif
     do i=1,totalbin
        write(11,*),(real(i-1)*convert_length2physical(BinSize,0.d0))/Mpc*h ,correlation_dist(i),correlation_undist(i)
     end do
     close(11)

#ifdef RR
     call system("rm -rf "//trim(result_path)//z_s(1:len_trim(z_s))//'/RR/haloperline.dat')
     print*, 'Printing to file ',trim(result_path)//'/'//z_s(1:len_trim(z_s))//'/RR/haloperline.dat'
     open(20,file=trim(result_path)//'/'//z_s(1:len_trim(z_s))//'/RR/haloperline.dat',STATUS = 'NEW')
#else
     call system("rm -rf "//trim(result_path)//z_s(1:len_trim(z_s))//'/RG/haloperline.dat')
     print*, 'Printing to file ',trim(result_path)//'/'//z_s(1:len_trim(z_s))//'/RG/haloperline.dat'
     open(20,file=trim(result_path)//'/'//z_s(1:len_trim(z_s))//'/RG/haloperline.dat',STATUS = 'NEW')
#endif

     do i=0,max_haloperlinehisto
        write(20,*),i ,finalhalolinehisto(i)
     end do
     close(20)

     !do i=2,totalbin
     !        finalhisto(i) = finalhisto(i) + finalhisto(i-1)
     !end do
     !open(12,file=trim(output_path)//'histo.dat')
     !do i=2,totalbin
     !   finalhisto(i)=finalhisto(i)+ finalhisto(i-1)
     !end do
     !do i=1,totalbin
     !   write(12,*),real(i)*(BinSize)-BinSize/2.,finalhisto(i)
     !end do
     !close(12)

     print*,'Deallocating arrays ....'
     deallocate(finalhisto_dist,finalhisto_undist)
     deallocate(correlation_dist,correlation_undist,finalhalolinehisto)
  endif
  call MPI_BARRIER(MPI_COMM_WORLD,ierr)
  deallocate(distorted_dist)
  deallocate(undistorted_dist)
  deallocate(lineid,online,linelinkedlist,histogram_dist,histogram_undist)
  deallocate(haloperlinehisto,subhaloperlinehisto)

#ifdef RR
end subroutine makecorrelation_rr
#else
end subroutine makecorrelation_rg
#endif
